import asyncio
from telethon import TelegramClient
from collections import defaultdict
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
plt.switch_backend('agg')


def search_in_university_channels():
    api_id = int(os.getenv("TELEGRAM_API_ID"))
    api_hash = os.getenv("TELEGRAM_API_HASH")
    session_name = "university_search"

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    university_channels = [
        'nakedboots',  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –°–ü–±–ì–£
    ]

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
    keywords = [
        "–≤–∞—Ä–∏–∞–Ω—Ç"
    ]

    stats = {
        'post_count': 0,
        'unique_channels': set(),
        'daily_posts': defaultdict(int),
        'errors': [],
        'found_messages': []
    }

    with TelegramClient(session_name, api_id, api_hash) as client:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=180)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –¥–æ 6 –º–µ—Å—è—Ü–µ–≤

        for channel in university_channels:
            try:
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª: {channel}...")

                try:
                    entity = client.get_entity(channel)
                except ValueError as e:
                    print(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                    stats['errors'].append(f"–ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue

                # –ò—â–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ search, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                for message in client.iter_messages(
                        entity,
                        offset_date=end_date,
                        reverse=True,
                        limit=1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                ):
                    if message.date < start_date:
                        break

                    if not hasattr(message, 'text') or not message.text:
                        continue

                    text = message.text.lower()
                    if any(keyword.lower() in text for keyword in keywords):
                        post_date = message.date.strftime('%Y-%m-%d')
                        stats['daily_posts'][post_date] += 1
                        stats['post_count'] += 1
                        stats['unique_channels'].add(channel)
                        stats['found_messages'].append({
                            'date': post_date,
                            'text': message.text[:100] + '...' if len(message.text) > 100 else message.text,
                            'channel': channel
                        })
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {post_date}")

            except Exception as e:
                error_msg = f"‚õî –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {str(e)}"
                stats['errors'].append(error_msg)
                print(error_msg)
                continue

        stats['unique_channels'] = len(stats['unique_channels'])
        return stats


def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤...")
    stats = search_in_university_channels()

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {stats['post_count']}")
    print(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['unique_channels']}")

    if stats['errors']:
        print("\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ:")
        for error in stats['errors']:
            print(f"- {error}")

    if stats['found_messages']:
        print("\nüîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 5):")
        for msg in stats['found_messages'][:5]:
            print(f"\nüìÖ {msg['date']} | üì¢ {msg['channel']}")
            print(f"üìù {msg['text']}")

    if stats['daily_posts']:
        dates = sorted(stats['daily_posts'].keys())
        counts = [stats['daily_posts'][date] for date in dates]

        plt.figure(figsize=(12, 6))
        plt.bar(dates, counts)
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
        plt.xticks(rotation=45)
        plt.tight_layout()

        plot_filename = "university_mentions.png"
        plt.savefig(plot_filename)
        print(f"\nüìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {plot_filename}")
        plt.close()
    else:
        print("\nüîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")


if __name__ == "__main__":
    main()